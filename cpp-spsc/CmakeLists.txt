cmake_minimum_required(VERSION 3.16)
project(SPSCQueue VERSION 1.1 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
endif()

if(POLICY CMP0069)
  cmake_policy(SET CMP0069 NEW)
endif()

if(POLICY CMP0167)
  cmake_policy(SET CMP0167 OLD)
endif()

include(CheckIPOSupported)
check_ipo_supported(RESULT ipo_supported OUTPUT ipo_msg)
if(ipo_supported)
  set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE ON)
endif()

add_library(${PROJECT_NAME} INTERFACE)
add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

target_compile_features(${PROJECT_NAME} INTERFACE cxx_std_11)

target_include_directories(${PROJECT_NAME} INTERFACE
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>
)

if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
  if(MSVC)
    add_compile_options(/permissive- /W4)
  else()
    add_compile_options(-Wall -Wextra -Wpedantic -Wno-c++17-extensions)
  endif()

  find_package(Threads REQUIRED)

  add_executable(SPSCQueueBenchmark src/SPSCQueueBenchmark.cpp)
  target_link_libraries(SPSCQueueBenchmark PRIVATE ${PROJECT_NAME}::${PROJECT_NAME} Threads::Threads)

  find_package(Boost)
  if(Boost_FOUND)
    target_include_directories(SPSCQueueBenchmark PRIVATE ${Boost_INCLUDE_DIRS})
  endif()

  find_path(FOLLY_INCLUDE_DIR folly/ProducerConsumerQueue.h
    HINTS /opt/homebrew/include /usr/local/include
  )
  if(FOLLY_INCLUDE_DIR)
    target_include_directories(SPSCQueueBenchmark PRIVATE ${FOLLY_INCLUDE_DIR})
  endif()

  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_options(SPSCQueueBenchmark PRIVATE
      $<$<CONFIG:Release>:/O2>
      $<$<CONFIG:Release>:/DNDEBUG>
    )
    target_link_options(SPSCQueueBenchmark PRIVATE $<$<CONFIG:Release>:/LTCG>)
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    target_compile_options(SPSCQueueBenchmark PRIVATE
      $<$<CONFIG:Release>:-O3>
      $<$<CONFIG:Release>:-DNDEBUG>
      $<$<CONFIG:Release>:-mcpu=native>
    )
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_options(SPSCQueueBenchmark PRIVATE
      $<$<CONFIG:Release>:-O3>
      $<$<CONFIG:Release>:-DNDEBUG>
      $<$<CONFIG:Release>:-march=native>
    )
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options(SPSCQueueBenchmark PRIVATE
      $<$<CONFIG:Release>:-O3>
      $<$<CONFIG:Release>:-DNDEBUG>
      $<$<CONFIG:Release>:-march=native>
    )
  endif()

  if(ipo_supported)
    set_property(TARGET SPSCQueueBenchmark PROPERTY INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE)
  endif()
endif()

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

write_basic_package_version_file(
  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
  COMPATIBILITY SameMajorVersion
)

export(
  TARGETS ${PROJECT_NAME}
  NAMESPACE ${PROJECT_NAME}::
  FILE "${PROJECT_NAME}Config.cmake"
)

if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
  install(DIRECTORY "include/" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

  install(TARGETS ${PROJECT_NAME}
    EXPORT "${PROJECT_NAME}Config"
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )

  install(EXPORT "${PROJECT_NAME}Config"
    NAMESPACE ${PROJECT_NAME}::
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
  )

  install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
  )
endif()
